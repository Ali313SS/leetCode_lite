// <auto-generated />
using System;
using AJudge.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AJudge.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250511011456_modifycontestv2")]
    partial class modifycontestv2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AJudge.Domain.Entities.Announcement", b =>
                {
                    b.Property<int>("AnnouncementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnnouncementId"));

                    b.Property<int>("ContestId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AnnouncementId");

                    b.HasIndex("ContestId");

                    b.HasIndex("UserId");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("AJudge.Domain.Entities.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogId"));

                    b.Property<int>("AuthorUserId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("BlogId");

                    b.HasIndex("AuthorUserId");

                    b.ToTable("Blog");
                });

            modelBuilder.Entity("AJudge.Domain.Entities.ChatBot", b =>
                {
                    b.Property<int>("BotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BotId"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BotId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatBots");
                });

            modelBuilder.Entity("AJudge.Domain.Entities.CoachRequest", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("CoachId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "CoachId");

                    b.HasIndex("CoachId");

                    b.ToTable("CoachRequest", (string)null);
                });

            modelBuilder.Entity("AJudge.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<int?>("BlogId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("AJudge.Domain.Entities.Contest", b =>
                {
                    b.Property<int>("ContestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContestId"));

                    b.Property<DateTime>("BeginTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatorUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tutorial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContestId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("GroupId");

                    b.ToTable("Contests", (string)null);
                });

            modelBuilder.Entity("AJudge.Domain.Entities.ContestProblem", b =>
                {
                    b.Property<int>("ContestId")
                        .HasColumnType("int");

                    b.Property<int>("ProblemId")
                        .HasColumnType("int");

                    b.HasKey("ContestId", "ProblemId");

                    b.HasIndex("ProblemId");

                    b.ToTable("ContestProblems");
                });

            modelBuilder.Entity("AJudge.Domain.Entities.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LeaderUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Privacy")
                        .HasColumnType("int");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GroupId");

                    b.HasIndex("LeaderUserId");

                    b.ToTable("Groups", (string)null);
                });

            modelBuilder.Entity("AJudge.Domain.Entities.OrignalProblems", b =>
                {
                    b.Property<string>("ProblemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InputFormat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutputFormat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProblemLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProblemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProblemSource")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProblemSourceID")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("numberOfTestCases")
                        .HasColumnType("int");

                    b.HasKey("ProblemId");

                    b.HasIndex("ProblemId")
                        .IsUnique()
                        .HasFilter("[ProblemId] IS NOT NULL");

                    b.ToTable("OrignalProblems", (string)null);
                });

            modelBuilder.Entity("AJudge.Domain.Entities.OrignalTestCases", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Input")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Output")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProblemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProblemId");

                    b.ToTable("OrignalTestCases", (string)null);
                });

            modelBuilder.Entity("AJudge.Domain.Entities.Problem", b =>
                {
                    b.Property<int>("ProblemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProblemId"));

                    b.Property<int>("ContestId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InputFormat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutputFormat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProblemLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProblemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProblemSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProblemSourceID")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("numberOfTestCases")
                        .HasColumnType("int");

                    b.HasKey("ProblemId");

                    b.HasIndex("ContestId");

                    b.ToTable("Problems", (string)null);
                });

            modelBuilder.Entity("AJudge.Domain.Entities.ProblemTag", b =>
                {
                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.Property<int>("ProblemsId")
                        .HasColumnType("int");

                    b.Property<string>("OrignalProblemsProblemId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TagsId", "ProblemsId");

                    b.HasIndex("OrignalProblemsProblemId");

                    b.HasIndex("ProblemsId");

                    b.ToTable("ProblemTag", (string)null);
                });

            modelBuilder.Entity("AJudge.Domain.Entities.RequestTojoinGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("RequestTojoinGroup");
                });

            modelBuilder.Entity("AJudge.Domain.Entities.Sources", b =>
                {
                    b.Property<int>("SourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SourceId"));

                    b.Property<string>("SourceLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SourceId");

                    b.ToTable("Sources", (string)null);
                });

            modelBuilder.Entity("AJudge.Domain.Entities.Statistics", b =>
                {
                    b.Property<int>("StatsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatsId"));

                    b.Property<string>("PerformanceData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("StatsId");

                    b.HasIndex("UserId");

                    b.ToTable("Statistics");
                });

            modelBuilder.Entity("AJudge.Domain.Entities.Submission", b =>
                {
                    b.Property<int>("SubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubmissionId"));

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("ProblemId")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SubmissionId");

                    b.HasIndex("GroupId");

                    b.HasIndex("ProblemId");

                    b.HasIndex("UserId");

                    b.ToTable("Submission");
                });

            modelBuilder.Entity("AJudge.Domain.Entities.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrignalProblemsProblemId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TagId");

                    b.HasIndex("OrignalProblemsProblemId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("AJudge.Domain.Entities.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeamId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("AJudge.Domain.Entities.TestCase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Input")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Output")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProblemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProblemId");

                    b.ToTable("TestCases");
                });

            modelBuilder.Entity("AJudge.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ClubUniversity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastSeen")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProblemsTriedCount")
                        .HasColumnType("int");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AJudge.Domain.Entities.UserCoaches", b =>
                {
                    b.Property<int>("CoachId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CoachId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCoaches");
                });

            modelBuilder.Entity("AJudge.Domain.Entities.UserFriend", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("FriendId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "FriendId");

                    b.HasIndex("FriendId");

                    b.ToTable("UserFriend");
                });

            modelBuilder.Entity("AJudge.Domain.Entities.UserTeam", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("UserTeamId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("UserTeams", (string)null);
                });

            modelBuilder.Entity("AJudge.Domain.Entities.UserTeamInvitation", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("UserTeamInvitation", (string)null);
                });

            modelBuilder.Entity("AJudge.Domain.Entities.Vote", b =>
                {
                    b.Property<int>("VoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VoteId"));

                    b.Property<int?>("BlogId")
                        .HasColumnType("int");

                    b.Property<Guid?>("CommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VoteType")
                        .HasColumnType("int");

                    b.HasKey("VoteId");

                    b.HasIndex("BlogId");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId", "BlogId")
                        .IsUnique()
                        .HasFilter("[BlogId] IS NOT NULL");

                    b.HasIndex("UserId", "CommentId")
                        .IsUnique()
                        .HasFilter("[CommentId] IS NOT NULL");

                    b.ToTable("Votes", t =>
                        {
                            t.HasCheckConstraint("CK_Vote_CommentOrBlog", "(CommentId IS NOT NULL AND BlogId IS NULL) OR (CommentId IS NULL AND BlogId IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("GroupUser", b =>
                {
                    b.Property<int>("ManagersGroupsGroupId")
                        .HasColumnType("int");

                    b.Property<int>("ManagersUserId")
                        .HasColumnType("int");

                    b.HasKey("ManagersGroupsGroupId", "ManagersUserId");

                    b.HasIndex("ManagersUserId");

                    b.ToTable("GroupManagers", (string)null);
                });

            modelBuilder.Entity("GroupUser1", b =>
                {
                    b.Property<int>("MembersGroupsGroupId")
                        .HasColumnType("int");

                    b.Property<int>("MembersUserId")
                        .HasColumnType("int");

                    b.HasKey("MembersGroupsGroupId", "MembersUserId");

                    b.HasIndex("MembersUserId");

                    b.ToTable("GroupMembers", (string)null);
                });

            modelBuilder.Entity("GroupUser2", b =>
                {
                    b.Property<int>("RequestsTojoinGroupGroupId")
                        .HasColumnType("int");

                    b.Property<int>("RequestsTojoinGroupUserId")
                        .HasColumnType("int");

                    b.HasKey("RequestsTojoinGroupGroupId", "RequestsTojoinGroupUserId");

                    b.HasIndex("RequestsTojoinGroupUserId");

                    b.ToTable("RequestsTojoinGroup", (string)null);
                });

            modelBuilder.Entity("AJudge.Domain.Entities.Announcement", b =>
                {
                    b.HasOne("AJudge.Domain.Entities.Contest", "Contest")
                        .WithMany("Announcements")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AJudge.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AJudge.Domain.Entities.Blog", b =>
                {
                    b.HasOne("AJudge.Domain.Entities.User", "Author")
                        .WithMany("Blogs")
                        .HasForeignKey("AuthorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("AJudge.Domain.Entities.ChatBot", b =>
                {
                    b.HasOne("AJudge.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AJudge.Domain.Entities.CoachRequest", b =>
                {
                    b.HasOne("AJudge.Domain.Entities.User", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AJudge.Domain.Entities.User", "User")
                        .WithMany("CoachRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Coach");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AJudge.Domain.Entities.Comment", b =>
                {
                    b.HasOne("AJudge.Domain.Entities.Blog", "Blog")
                        .WithMany("Comments")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AJudge.Domain.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AJudge.Domain.Entities.Contest", b =>
                {
                    b.HasOne("AJudge.Domain.Entities.User", "Creator")
                        .WithMany("CompeteContests")
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AJudge.Domain.Entities.Group", "Group")
                        .WithMany("Contests")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("AJudge.Domain.Entities.ContestProblem", b =>
                {
                    b.HasOne("AJudge.Domain.Entities.Contest", "Contest")
                        .WithMany("Contests")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AJudge.Domain.Entities.Problem", "Problem")
                        .WithMany("ProblemsCon")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("AJudge.Domain.Entities.Group", b =>
                {
                    b.HasOne("AJudge.Domain.Entities.User", "Leader")
                        .WithMany("LeadGroups")
                        .HasForeignKey("LeaderUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Leader");
                });

            modelBuilder.Entity("AJudge.Domain.Entities.OrignalTestCases", b =>
                {
                    b.HasOne("AJudge.Domain.Entities.OrignalProblems", "Problem")
                        .WithMany("TestCases")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("AJudge.Domain.Entities.Problem", b =>
                {
                    b.HasOne("AJudge.Domain.Entities.Contest", null)
                        .WithMany("Problems")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AJudge.Domain.Entities.ProblemTag", b =>
                {
                    b.HasOne("AJudge.Domain.Entities.OrignalProblems", null)
                        .WithMany("ProblemTags")
                        .HasForeignKey("OrignalProblemsProblemId");

                    b.HasOne("AJudge.Domain.Entities.Problem", "Problem")
                        .WithMany("ProblemTags")
                        .HasForeignKey("ProblemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AJudge.Domain.Entities.Tag", "Tag")
                        .WithMany("ProblemTags")
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Problem");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("AJudge.Domain.Entities.RequestTojoinGroup", b =>
                {
                    b.HasOne("AJudge.Domain.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AJudge.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AJudge.Domain.Entities.Statistics", b =>
                {
                    b.HasOne("AJudge.Domain.Entities.User", "User")
                        .WithMany("Statistics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AJudge.Domain.Entities.Submission", b =>
                {
                    b.HasOne("AJudge.Domain.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.HasOne("AJudge.Domain.Entities.Problem", "Problem")
                        .WithMany("Submissions")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AJudge.Domain.Entities.User", "User")
                        .WithMany("Submissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Problem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AJudge.Domain.Entities.Tag", b =>
                {
                    b.HasOne("AJudge.Domain.Entities.OrignalProblems", null)
                        .WithMany("Tags")
                        .HasForeignKey("OrignalProblemsProblemId");
                });

            modelBuilder.Entity("AJudge.Domain.Entities.TestCase", b =>
                {
                    b.HasOne("AJudge.Domain.Entities.Problem", "Problem")
                        .WithMany("TestCases")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("AJudge.Domain.Entities.UserCoaches", b =>
                {
                    b.HasOne("AJudge.Domain.Entities.User", "Coach")
                        .WithMany("CoachedByhim")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AJudge.Domain.Entities.User", "User")
                        .WithMany("UserCoaches")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Coach");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AJudge.Domain.Entities.UserFriend", b =>
                {
                    b.HasOne("AJudge.Domain.Entities.User", "Friend")
                        .WithMany("FriendsOf")
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AJudge.Domain.Entities.User", "User")
                        .WithMany("Friends")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Friend");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AJudge.Domain.Entities.UserTeam", b =>
                {
                    b.HasOne("AJudge.Domain.Entities.Team", "Team")
                        .WithMany("UserTeams")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AJudge.Domain.Entities.User", "User")
                        .WithMany("UserTeams")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AJudge.Domain.Entities.UserTeamInvitation", b =>
                {
                    b.HasOne("AJudge.Domain.Entities.Team", "Team")
                        .WithMany("Invitations")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AJudge.Domain.Entities.User", "User")
                        .WithMany("Invitations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AJudge.Domain.Entities.Vote", b =>
                {
                    b.HasOne("AJudge.Domain.Entities.Blog", "Blog")
                        .WithMany("Votes")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AJudge.Domain.Entities.Comment", "Comment")
                        .WithMany("Votes")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AJudge.Domain.Entities.User", "Voter")
                        .WithMany("Votes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("Comment");

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("GroupUser", b =>
                {
                    b.HasOne("AJudge.Domain.Entities.Group", null)
                        .WithMany()
                        .HasForeignKey("ManagersGroupsGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AJudge.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("ManagersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupUser1", b =>
                {
                    b.HasOne("AJudge.Domain.Entities.Group", null)
                        .WithMany()
                        .HasForeignKey("MembersGroupsGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AJudge.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("MembersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupUser2", b =>
                {
                    b.HasOne("AJudge.Domain.Entities.Group", null)
                        .WithMany()
                        .HasForeignKey("RequestsTojoinGroupGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AJudge.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("RequestsTojoinGroupUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AJudge.Domain.Entities.Blog", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("AJudge.Domain.Entities.Comment", b =>
                {
                    b.Navigation("Votes");
                });

            modelBuilder.Entity("AJudge.Domain.Entities.Contest", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("Contests");

                    b.Navigation("Problems");
                });

            modelBuilder.Entity("AJudge.Domain.Entities.Group", b =>
                {
                    b.Navigation("Contests");
                });

            modelBuilder.Entity("AJudge.Domain.Entities.OrignalProblems", b =>
                {
                    b.Navigation("ProblemTags");

                    b.Navigation("Tags");

                    b.Navigation("TestCases");
                });

            modelBuilder.Entity("AJudge.Domain.Entities.Problem", b =>
                {
                    b.Navigation("ProblemTags");

                    b.Navigation("ProblemsCon");

                    b.Navigation("Submissions");

                    b.Navigation("TestCases");
                });

            modelBuilder.Entity("AJudge.Domain.Entities.Tag", b =>
                {
                    b.Navigation("ProblemTags");
                });

            modelBuilder.Entity("AJudge.Domain.Entities.Team", b =>
                {
                    b.Navigation("Invitations");

                    b.Navigation("UserTeams");
                });

            modelBuilder.Entity("AJudge.Domain.Entities.User", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("CoachRequests");

                    b.Navigation("CoachedByhim");

                    b.Navigation("Comments");

                    b.Navigation("CompeteContests");

                    b.Navigation("Friends");

                    b.Navigation("FriendsOf");

                    b.Navigation("Invitations");

                    b.Navigation("LeadGroups");

                    b.Navigation("Statistics");

                    b.Navigation("Submissions");

                    b.Navigation("UserCoaches");

                    b.Navigation("UserTeams");

                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
